{"version":3,"sources":["components/frontlogo.js","components/card.js","components/searchbar.js","components/favourites.js","components/footer.js","components/header.js","App.js","index.js"],"names":["FrontLogo","className","src","alt","Card","props","useState","isFavourite","setIsFavourite","display","setDisplay","click","setClicked","btnClicked","useEffect","i","Link","href","link","Img","imgThumbnail","Body","Title","name","Subtitle","id","kind","Text","artistName","class","onClick","sessionStorage","getItem","setItem","JSON","stringify","addFavourite","parse","newFavourite","key","length","alert","push","window","location","reload","addToFavourites","require","SearchBar","handleSubmit","bind","state","error","option","search","results","event","this","setState","preventDefault","fetch","method","headers","body","then","res","json","response","forceUpdate","console","log","catch","map","result","collectionId","trackViewUrl","trackName","artworkUrl100","collectionArtistId","onSubmit","type","placeholder","onChange","target","value","searchResults","React","Component","Favourites","favouritesList","count","e","index","delFav","splice","delFavourite","Footer","year","Date","getFullYear","Header","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d026c2c3.chunk.js","sourcesContent":["import React from \"react\"\n\n// This was probably not needed but I was procrastinating from doing the difficult stuff.\nfunction FrontLogo() {\n    return(\n      <div className=\"front-logo\">\n        <h1>Banana \n        <span>\n          <br/>\n            <img src=\"./icons/banana.png\" alt=\"banana logo\"></img>\n          <br/>\n        </span>\n       iStore\n      </h1>\n        <br></br>\n          <h3>Definitely not an apple iTunes ripoff</h3>\n        <br></br>\n      </div>\n    )\n}\n\nexport default FrontLogo","// Import React, useState and UseEffect and bootstrap Card library\nimport React, {useState, useEffect} from 'react';\nimport BSCard from 'react-bootstrap/Card';\n// import useForceUpdate from 'use-force-update'; Apparently this was supposed to force a render but it didn't work out for me so I left it for later.\n\n// Creating our functional card component and passing in props. Creating hooks using useState.\nfunction Card(props) {\n    const [isFavourite, setIsFavourite] = useState(false);\n    const [display, setDisplay] = useState(false);\n    const [click, setClicked] = useState(false);\n    // const forceUpdate = useForceUpdate()\n\n    // This is so that I can assign a class name to the favourites line in the card so that I can control whether its red or default.\n    let btnClicked = click? 'button-clicked' : 'button-not-clicked';\n\n    // This function is triggered by an Onclick event. \n    function addToFavourites() {\n        // This first part is just to make sure the browser can load into the initial state of the webpage without encountering the null problem due to it not having data.\n        if (sessionStorage.getItem('favouriteList') === null) {\n            const favourites = [];\n            sessionStorage.setItem('favouriteList', JSON.stringify(favourites));\n          }\n        //   Creating a variable to hold our converted session storage data.\n        let addFavourite = JSON.parse(sessionStorage.getItem('favouriteList'));\n        setClicked(true);\n        // Creating a new object that will be passed into our session storage.\n        const newFavourite = {\n            id:props.id,\n            key:props.key,\n            kind:props.kind,\n            link:props.link,\n            name:props.name,\n            artistName:props.artistName,\n            imgThumbnail:props.imgThumbnail,    \n          };\n\n        // This is so that no duplicates are added as well as allowing toggling so that u can add and remove your favourites easily. That functionality still needs to be added.\n        for (let i=0; i<addFavourite.length; i++) {\n            if (addFavourite[i].name === newFavourite.name) {\n                setIsFavourite(!isFavourite);\n                alert(\"You've already added this item\"); //This is a temporary solution till I understand how to add and remove favourites easily.\n                return;\n            }\n        }\n        // Pushing our new object into our existing array. Then sending that updated converted data to the sessionStorage. Finally alerting the user and reloading the page.\n        addFavourite.push(newFavourite)\n        sessionStorage.setItem('favouriteList', JSON.stringify(addFavourite));\n        alert('Item added to Favorites');\n        setDisplay(true);\n        window.location.reload()//temporary solution till I can wrap my head around how to update the render of the favourite items after a click has happened.\n    }\n\n    // Had big plans but ran out of time. In the future I will repair this section.\n    useEffect(() => {\n        // let array = JSON.parse(sessionStorage.getItem('favouriteList'));\n        // for (let i = 0; i < array.length; i++){\n            // sessionStorage.setItem('favouriteList', JSON.stringify(array));\n    \n\n        // if (sessionStorage.getItem('favouriteList') !== null) {\n        //     setDisplay(true);\n        //     }\n        if (display === true) { \n            for (let i=0; i<1; i++) {\n                // forceUpdate();\n                setDisplay(false);\n            }\n        }\n        \n        }, [isFavourite, display]\n    )\n\n        // Using our lovely bootstrap Card library to create a clean card that can be manipulated easily. Pass in the props from the other components to receive the data.\n    return (\n        <BSCard className='display-card-body card-group mb-3 h-100'>\n            <div className='card'>\n            <BSCard.Link href={props.link}>\n                <BSCard.Img src={props.imgThumbnail} className='card-img'/>\n            </BSCard.Link>\n            <BSCard.Body>\n                <BSCard.Title><strong>{props.name}</strong></BSCard.Title>\n                <BSCard.Subtitle className='mb-2 text-muted'>{props.id}</BSCard.Subtitle>\n                <BSCard.Subtitle className='mb-2 card-type'>{props.kind}</BSCard.Subtitle>\n                <BSCard.Text>\n                {props.artistName}\n                </BSCard.Text>\n                <BSCard.Link className='card-links' href={props.link}>Link to item <i class='fas fa-link'></i></BSCard.Link>\n                <BSCard.Link className={`${btnClicked} card-links`}  id=\"addFavBtn\" onClick={() => addToFavourites()}>Favourite <i class='far fa-heart'></i></BSCard.Link>\n            </BSCard.Body>\n            </div>\n        </BSCard>\n    )\n}\n\nexport default Card;","// Import React module and Card component\nimport React from 'react'\nimport Card from './card';\n// So we can use fetch\nrequire('isomorphic-fetch');\n\n\n// Creating a class component because the searchBar will definitely be stateful and have many changing parts. Constructor is just initialising some state variables.\nclass SearchBar extends React.Component{\n    constructor(props){\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.state = {\n            error: null,\n            option: 'all',\n            search: '',\n            results: [],\n            reload: false\n        }       \n    }\n\n    // This function gets triggered when the onClick event gets pressed on the Search button. If there is no search item it will prompt the user to enter a search term first. I reset the state of the results to nothing so that the previous results don't stack ontop of it. I then use the fetch method to not only pass the data of search and option to the backend but also to retrieve that data and then update the results state. I force update the render so that it shows the latest render without having to refresh the screen. If the server wasn't started up then an error alert gets shown.\n    handleSubmit(event) {\n        if (this.state.search === '') {\n            return alert('Please enter a search item');\n        }\n        this.setState({results: []});\n        event.preventDefault();\n        fetch('/search', {\n            method:'POST',\n            headers:{'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                search:this.state.search,\n                option:this.state.option\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            this.setState({results: response})\n            this.forceUpdate();\n            console.log(this.state);\n        })\n\n        .catch(error => {\n            alert('Server is currently offline. Please try again later.');\n            this.setState(error);\n            console.log(error);\n        })\n    }\n\n    // Creates the cards that will display the search results. This is also where all the props get passed to the other components. Gets triggered if the length of the results is greater than 0. Basically maps the original results so that the card component can be made whilst passing along the props needed.\n    searchResults() {\n        const results = this.state.results.results;\n        return (\n        results.map(result => \n            <Card \n            id={result.collectionId}\n            key={result.collectionArtistId}\n            kind={result.kind}\n            link={result.trackViewUrl}\n            name={result.trackName}\n            artistName={result.artistName}\n            imgThumbnail={result.artworkUrl100}    \n            /> )\n        )\n    }\n\n    // Just some basic forms for input data. Notice the onChange and Onclick events.\n    render() {\n        return (\n            <div className='search-form' id='Search'>\n                <h1>Search</h1>\n                <form className='search-bar-form' onSubmit={this.handleSubmit}>\n                    <input type='text' placeholder='What do you want to search for?' onChange={(event) => this.setState({search:event.target.value})}></input>\n                    <div className='dropdown'>\n                        <select className='drop-btn form-select form-select-lg mb-3 mt-3' onChange={(event) => this.setState({option: event.target.value})}>\n                            <option value='all'>All</option>\n                            <option value='movie'>Movies</option>\n                            <option value='music'>Music</option>\n                            <option value='podcast'>Podcasts</option>\n                            <option value='audiobook'>Audiobook</option>\n                            <option value='shortFilm'>Short Film</option>\n                            <option value='tvShow'>TV Shows</option>\n                            <option value='ebook'>Ebooks</option>\n                        </select>\n                    </div>\n                    <button type='submit' className='btn btn-lg btn-info mb-3'>Search <i className='fa fa-search'></i></button>\n                </form>\n                <div className='search-results'  id ='search-results'>\n                    {/* Quite proud of this. Used ternary operator to display the search results. If the length of the state of the results is greater than 0 it will trigger the searchResults method else it will show nothing */}\n                    {this.state.results.length !== 0 ? <div><h3>Search Results</h3>{this.searchResults()}</div> : ''} \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar","// Import React module and Card component\nimport React from 'react';\nimport Card from './card';\n\n// Creating a functional component. This will render our Favourite Cards component using the Card component again.(Hey hey hey React am I right?)\nfunction Favourites() {\n    // This first part is so that our program doesnt break on startup. By giving it a value we can skip the null error.\n    if (sessionStorage.getItem('favouriteList') === null) {\n        const favourites = [];\n        sessionStorage.setItem('favouriteList', JSON.stringify(favourites));\n      }\n    //   Getting the session storage data and storing it in a global variable\n    let favouritesList = JSON.parse(sessionStorage.getItem('favouriteList'));\n    let count = 0;\n\n    // This basically just maps our session storage data so that we can create the needed cards passing on the relevant props. I also threw in our delete button with onClick events that trigger our delFavourite function.\n    function getFavourites() {\n        return(\n        favouritesList.map(result => {\n            count = count + 1;\n            return (\n            <div className='fav-items-div'>\n                <Card \n                id={result.id}\n                key={result.key}\n                kind={result.kind}\n                link={result.link}\n                name={result.name}\n                artistName={result.artistName}\n                imgThumbnail={result.imgThumbnail}    \n                />\n                <br/>\n                <button className='btn btn-lg btn-info DeleteBtn' onClick={(e) => delFavourite(count)}>Delete</button>\n            </div>\n            )}\n        ))\n    }\n\n    // Deletes an item from our array. Then sends the updated version back to JSON format and into our sessionStorage. Reloads the page so that we can see the updated array.\n    function delFavourite(index) {\n        let delFav = [];\n        delFav = favouritesList.splice(index - 1, 1);\n        sessionStorage.setItem('favouriteList', JSON.stringify(delFav));\n        window.location.reload();\n    }\n\n\n    return(\n        <div id='Favs'>\n            <h1>Your favourite items are:</h1>\n            <div className='search-results'  id ='search-results'>\n            {/* ternary operator that triggers the getFavourites function if the length of the array is greater than 0 */}\n                    {favouritesList.length !== 0 ? getFavourites() : <h3>Nothing at the moment. <br/> Feel free to add some after searching. <br/> If you still can't see your favourites but you know you added them.<br/> Please refresh the page.</h3>} \n                </div>\n        </div>\n    )\n}\n\nexport default Favourites","import React from 'react';\n\n// Creating a dynamic copyright footer for the year.\n\nfunction Footer() {\n        const date = new Date();\n        const year = date.getFullYear();\n    return (\n        <div>\n            <h6>Copyright {year}. Hyperion Dev Bootcamp. Alan Kow</h6>\n            <a href='#home'>Back to top of page</a>\n        </div>\n    )\n}\n\nexport default Footer;","import React from 'react';\n\n// Just holds our Navbar items uses bootstrap for some styling\nfunction Header() {\n    return (\n        <div className='navbar-div'>\n            <nav className='navbar navbar-expand-lg navbar-dark bg-dark'>\n                <div className='dropdownMenu'>\n                    <i class='fas fa-leaf'></i><a class='navbar-brand header-logo' href='#Home'>banana</a>\n                </div>\n                <ul class='navbar-nav list-group'>\n                    <li className='nav-item'><a href='#Home'>Home</a></li>\n                    <li className='nav-item'><a href='#Search'>Search</a></li>\n                    <li className='nav-item'><a href='#Favs'>Favourites</a></li>\n                </ul>\n                </nav>\n        </div>\n    )\n}\n\nexport default Header;\n\n","// importing all the relevant components needed to render\nimport React from 'react';\nimport FrontLogo from './components/frontlogo';\nimport SearchBar from './components/searchbar'\nimport Favourites from './components/favourites';\nimport Footer from './components/footer';\nimport Header from './components/header';\n\n\n// App component is basically just the home component for all the other components\nfunction App() {\n  return (\n    <div className='App' id='Home'>\n      <header className='App-header'>\n        <Header />\n      </header>\n      <main>\n        <FrontLogo />\n        <hr/>\n        <SearchBar />\n        <hr/>\n        <Favourites />\n      </main>\n      <footer>\n        <Footer />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// Importing React to create a web app\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// Final rendering\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}